import java.util.HashMap;

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        // Create a hash map to store the last index of each character
        HashMap<Character, Integer> charMap = new HashMap<>();
        int maxLen = 0;
        int start = 0;

        // Traverse the string
        for (int end = 0; end < s.length(); end++) {
            char currentChar = s.charAt(end);

            // If the character is already in the map and is in the current window
            if (charMap.containsKey(currentChar) && charMap.get(currentChar) >= start) {
                // Move the start pointer to the right of the last occurrence of currentChar
                start = charMap.get(currentChar) + 1;
            }

            // Update the hash map with the current character and its index
            charMap.put(currentChar, end);

            // Calculate the maximum length of the window
            maxLen = Math.max(maxLen, end - start + 1);
        }

        return maxLen;
    }
}
